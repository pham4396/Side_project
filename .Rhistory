# "Employee"
Employee_number <- c(1:100)
Employee <- paste("Employee", Employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(Employee, salaries, salary_change, stringsAsFactors = False)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors = False)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors=FALSE)
View(Employee_info)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
current_salary <- salaries + salary_change
Employee_info$current_salary
Employee_info[4] <- current_salary
View(Employee_info)
Employee_info[current_salary] <- current_salary
View(Employee_info)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
current_salary <- salaries + salary_change
Employee_info$change <- current_salary
View(Employee_info)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
if(salary_change > 0) {
raise == TRUE
} else {
raise == FALSE
}
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
if(salary_change > 0) {
raise <-TRUE
} else {
raise <- FALSE
}
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
got_raise <- slary_change[salary_change > 0]
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
got_raise <- salary_change[salary_change > 0]
Employee_info$got_raise <- got_raise
print(got_raise)
Employee_info$got_raise <- raise
View(Employee_info)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
current_salary <- salaries + salary_change
Employee_info$change <- current_salary
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
raise <- salary_change[salary_change > 0]
(1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
current_salary <- salaries + salary_change
Employee_info$change <- current_salary
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salary_change[salary_change > 0]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
Employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
current_salary <- salaries + salary_change
Employee_info$change <- current_salary
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
raise <- salary_change > 0
Employee_info$got_raise <- raise
View(Employee_info)
# What was the 2018 salary of employee 57
my_df[57, 2]
# What was the 2018 salary of employee 57
Employee_info[57, 2]
# How many employees got a raise?
nrow(Employee_info[, 5])
# How many employees got a raise?
Employee_info[Employee_info$raise > 0]
# How many employees got a raise?
Employee_info[Employee_info$got_raise > 0]
# How many employees got a raise?
Employee_info[Employee_info$5 > 0]
# How many employees got a raise?
Employee_info[Employee_info$'got_raise' > 0]
# How many employees got a raise?
Employee_info[Employee_info$got_raise == TRUE]
# How many employees got a raise?
raise? <- Employee_info[Employee_info$got_raise == TRUE]
# How many employees got a raise?
did_raise <- Employee_info[Employee_info$got_raise == TRUE]
# How many employees got a raise?
Employee_info[got_raise == TRUE]
# How many employees got a raise?
Employee_info[, 5]
# How many employees got a raise?
Employee_info[, 5 == TRUE]
# How many employees got a raise?
raise? <- Employee_info[, 5 == TRUE]
# How many employees got a raise?
employee_info[, 5 == TRUE]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_number <- c(1:100)
employee <- paste("Employee", employee_number)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_change <- runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
employee_info <- data.frame(employee, salaries, salary_change, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
current_salary <- salaries + salary_change
employee_info$change <- current_salary
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
raise <- salary_change > 0
employee_info$got_raise <- raise
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
employee_info[57, 2]
# How many employees got a raise?
employee_info[, 5 == TRUE]
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# What was the dollar value of the highest raise?
employee_info[, max(5)]
# What was the dollar value of the highest raise?
employee_info[, max(4)]
# What was the dollar value of the highest raise?
employee_info[max(4), max(4)]
employee_info[, "salary_change" > 0]
# How many employees got a raise?
employee_info["salary_change" > 0, ]
employee_info["salary_change" > 0, ]
employee_info[employee_info$salary_change > 0, ]
# How many employees got a raise?
employee_with_raise <- employee_info[employee_info$salary_change > 0, ]
dim(employee_with_raise)
nrow <- dim(employee_with_raise)[1]
nrow <- dim(employee_with_raise)[2]
nrow <- dim(employee_with_raise)[1]
# What was the dollar value of the highest raise?
employee_info[max(employee_info$change),  ]
# What was the 2018 salary of employee 57
employee_info[57, salaries]
# What was the 2018 salary of employee 57
employee_info[57, colnames((salaries))]
# What was the 2018 salary of employee 57
employee_info[57, 2]
# What was the dollar value of the highest raise?
employee_info[max(change),  ]
# What was the dollar value of the highest raise?
employee_info[max(4),  ]
# What was the dollar value of the highest raise?
employee_info[4,  ]
# Your script for Part 1 goes here (and delete this comment!)
names <- c("Michelle Ho", "Patricia Au", "Anukriti Goyal", "Andrew Kan", "Bao Dinh", "Kishore Vasan" )
math_grades <- runif(6, 0, 100)
math_grades <- round(runif(6, 0, 100))
math_grades <- round(runif(6, 80, 100))
spanish_grades <- round(runit(6, 80, 100))
spanish_grades <- round(runif(6, 80, 100))
tas <- data.frame(names, math_grades, spanish_grades stringsAsFactors = FALSE)
tas <- data.frame(names, math_grades)
tas <- data.frame(names, math_grades, spanish_grades)
view(tas)
View(tas)
View(tas)
dimensions_of_tas - dim.data.frame(tas)
dimensions_of_tas <- dim.data.frame(tas)
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
tas[1, ],))
print(paste("The TA data fram has", dimensions_of_tas[1] ))
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
tas[1, ]))
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
colnames(tas)))
colnames(c(tas)))
print(colnames(tas))
col_names <- paste(colnames(tas))
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
col_names))
col_names <- paste(colnames(tas), collapse = TRUE)
col_names <- paste(colnames(tas), collapse = NULL)
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
col_names))
print(colnames(tas))
col_names <- paste(colnames(tas), collapse = " ")
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
col_names))
col_names <- paste(colnames(tas), collapse = ",")
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
col_names))
col_names <- paste(colnames(tas), collapse = ", ")
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
col_names))
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2], "cols:",
col_names))
row.names(tas) <- names
print(tas["Bao Dinh", ])
grad_diff <- tas[, math_grades] - tas[, spanish_grades]
grad_diff <- math_grades - spanish_grades
tas$grad_diff <- grad_diff
grad_diff[grad_diff > 0]
# Your script for Part 1 goes here (and delete this comment!)
names <- c("Michelle Ho", "Patricia Au", "Anukriti Goyal", "Andrew Kan", "Bao Dinh", "Kishore Vasan" )
better_at_math <- grad_diff > 0
tas$better_at_math <- better_at_math
tas_better_at_math <- tas[tas$better_at_math > 0]
row.names(tas) <- names
print(tas["Bao Dinh", ])
grad_diff <- math_grades - spanish_grades
tas$grad_diff <- grad_diff
better_at_math <- grad_diff > 0
tas$better_at_math <- better_at_math
tas_better_at_math <- tas[tas$better_at_math > 0]
tas_better_at_math <- tas[tas$better_at_math > 0, ]
num_better_at_math <- dim.data.frame(tas_better_at_math)
num_better_at_math <- dim.data.frame(tas_better_at_math)[1]
print(num_better_at_math)
#################
#### PART 1 #####
#################
# A vector of names of all tas of info 201
names <- c("Michelle Ho", "Patricia Au", "Anukriti Goyal", "Andrew Kan", "Bao Dinh",
"Kishore Vasan" )
# A vector of numbers that are the math grades of the tas
math_grades <- round(runif(6, 80, 100))
# A vector of numbers that are the spanish grades of the tas
spanish_grades <- round(runif(6, 80, 100))
# A data fram of the names, math grades, and spanish grades of the tas
tas <- data.frame(names, math_grades, spanish_grades, stringsAsFactors = FALSE)
# A varible gives the dimensions of the data frame tas
dimensions_of_tas <- dim.data.frame(tas)
# a Varible that turns the column titles into a string and then prints a sentence describing the
# data frames's dimensions.
col_names <- paste(colnames(tas), collapse = ", ")
print(paste("The TA data fram has", dimensions_of_tas[1], "rows and", dimensions_of_tas[2],
"cols:", col_names))
#sets the row names of the data fram to the names of the tas
row.names(tas) <- names
#prints out the row of my TA
print(tas["Bao Dinh",])
# A variable that finds the difference between the math and spanish grades. Then adds a column
# with the differences
grad_diff <- math_grades - spanish_grades
tas$grad_diff <- grad_diff
# A varible that determines if the TA has a higher math grade compared to spanish. Creates a
# column weather the TA is better at Math
better_at_math <- grad_diff > 0
tas$better_at_math <- better_at_math
# The following code counts how many tas are better at math
tas_better_at_math <- tas[tas$better_at_math > 0, ]
num_better_at_math <- nrow(tas_better_at_math)
print(num_better_at_math)
# creates a CSV file of the tas data frame.
write.csv(tas, 'tas.csv', row.names = FALSE)
#################
#### PART 2 #####
#################
# A varible that takes in the csv file "life_expectancy"
life_expectancy <- read.csv('data/life_expectancy.csv', stringsAsFactors = FALSE)
# the following varible finds the difference between le_2013 and le_1960, then adds a column with
# the differences
life_expectancy_diff <- life_expectancy$le_2013 - life_expectancy$le_1960
life_expectancy$change <- life_expectancy_diff
# the following lines of code finds and prints the countries with a life expectancy increase of
# less then 5 years
num_small_gain <- life_expectancy[life_expectancy_diff < 5, ]
print(num_small_gain[,"country" ])
# This varible finds the country with the highest change in life expectancy
most_improve <- life_expectancy[max(life_expectancy$change), ]
# This Function takes a country's name and returns the change in life expectancy of that
# country
country_change <- function(country_name){
rownames(life_expectancy) <- life_expectancy$country
life_expectancy[country_name, "change"]
}
# prints out the life expectancy change of Haiti
print(country_change("Haiti"))
# This Function takes the name of a region and return the country with the lowest life expectancy
# of 2013
lowest_life_exp_in_region <- function(region_name){
region_data <- life_expectancy[life_expectancy$region == region_name, ]
lowest_of_current <- region_data[region_data$le_2013 == min(region_data$le_2013), "country"]
}
# prints out the lowest life expectancy country of the latin america & Caribbean region
print(lowest_life_exp_in_region("Latin America & Caribbean"))
# This function takes in two countries and comparies their life expectancyies in 2013 and their
# change
compare_countries <- function(country1, country2){
country_filter <- life_expectancy$country == country1 | life_expectancy$country == country2
life_expectancy[country_filter, c('country', 'le_2013', 'change')]
}
# The varible comparies the US and Cuba
us_vs_cuba <- compare_countries("United States", "Cuba")
#################
#### PART 3 #####
#################
# loads the data Titanic
data("Titanic")
# determines if the data Titanic is a data frame
is.data.frame(Titanic)
# This varible makes the Titanic data a data frame
Titanic_data_frame <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# A varible that finds all the rows that involve children in the Titanic_data_frame
children <- Titanic_data_frame[Titanic_data_frame$Age == "Child",]
# A varible that finds the total amount of children
children_num <- sum(children$Freq)
# the following lines of code finds and prints the row of that has the largest amount of non
# survivors
did_not_survive_data <- Titanic_data_frame[Titanic_data_frame$Survived == "No", ]
largest_lost_row <- did_not_survive_data[did_not_survive_data$Freq == max(did_not_survive_data$Freq), ]
print(largest_lost_row)
# That the class Crew had the lowest priority when it came to the evacuation.
# This function takes in a class type and returns sentence telling the percentage of men and women
#  and children that survived out of the total men, and total women and children.
survival_rate <- function(class){
# filters the Titanic data frame to only show the typed class
class_data <- Titanic_data_frame[Titanic_data_frame$Class == class, ]
# The varible finds all Adult males in the class_data then sums how many of them there are
male_age_data <- class_data[class_data$Age == 'Adult' & class_data$Sex == 'Male', ]
all_males <- sum(male_age_data$Freq)
# This varible filters out the males who died then sums up how many surviors then finds the
# precentage that survives
male_survived_data <- male_age_data[male_age_data$Survived == "Yes", ]
all_survive_males <- sum(male_survived_data$Freq)
male_survival_ratio <- round((all_survive_males / all_males) * 100)
# Finds all the non males in the Titanic data frame then finds the total
nonmale_data <- class_data[class_data$Sex != "Male", ]
all_women_children <- sum(nonmale_data$Freq)
# Filters out the ones who died then totals the surviors then finds the survior ratio
women_children_survive_data <- nonmale_data[nonmale_data$Survived == "Yes", ]
all_survived_women_children <- sum(women_children_survive_data$Freq)
nonmale_survival_ratio <- round((all_survived_women_children / all_women_children) * 100)
# creates a sentence that states the precentage of men and women and children that survived in
# there class.
summary <- paste("Of ", class, " class, ", male_survival_ratio, "% of men survived and ",
nonmale_survival_ratio, "% of women and children survived", sep = "")
}
# prints the survival rate of 1st, 2nd, and 3rd class
print(c(survival_rate("1st"), survival_rate("2nd"), survival_rate("3rd")))
# the women and children first policy save almost all women and children from the 1st and 2n
# classes but it seem to not have save as many in the 3rd class. This is probably due to when
# the crew did begin evacuating the 3rd class passengers the ship was close to going under and
# there weren't enough life boats too.
tas$grad_diff <- math_grades - spanish_grades
View(tas)
# the following lines of code finds and prints the row of that has the largest amount of non
# survivors
did_not_survive_data <- Titanic_data_frame[Titanic_data_frame$Survived == "No", ]
largest_lost_row <- did_not_survive_data[did_not_survive_data$Freq ==
max(did_not_survive_data$Freq), ]
print(largest_lost_row)
install.packages(shiny)
install.packages("shiny")
library("shiny")
library("shiny")
header <- h1("Hello, My name is elder ")
my_ui <- fluidPage(
header,
p("what is your name")
)
install.package("shiny")
shinyApp(ui = my_ui, server = my_server)
library("shiny")
header <- h1("Hello, My name is elder ")
my_ui <- fluidPage(
header,
p("what is your name")
)
my_server <- function(input, output) {
}
shinyApp(ui = my_ui, server = my_server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dpham',
token='A746228B0A4AC7BDE12578E01781C198',
secret='mQDmDZJn5UyLsb/4eAr2SqUhOaaUHh3Vr/uR2ZiL')
rsconnect::setAccountInfo(name='dpham',
token='A746228B0A4AC7BDE12578E01781C198',
secret='mQDmDZJn5UyLsb/4eAr2SqUhOaaUHh3Vr/uR2ZiL')
library("shiny")
header <- h1("Hello")
my_ui <- fluidPage(
header,
p("what is your name")
)
my_server <- function(input, output) {
}
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
shiny::runApp('UW class docs/Senior Year/Info 201/a8-data-app-pham4396')
?textInput
?tabPanel
runApp('UW class docs/Senior Year/Info 201/a8-data-app-pham4396')
shiny::runApp('UW class docs/Senior Year/Info 201/a8-data-app-pham4396')
shiny::runApp('UW class docs/Senior Year/Info 201/INFO-201-Final-Project')
runApp('UW class docs/Senior Year/Info 201/INFO-201-Final-Project')
runApp('UW class docs/Senior Year/Info 201/INFO-201-Final-Project')
install.packages(shinyjs)
install.packages("shinyjs")
library(shinyjs)
runApp('UW class docs/Senior Year/Info 201/INFO-201-Final-Project')
library(shiny); runApp('Side_project/ui.R')
university_bands <- read.csv('University_bands.csv', stringsAsFactors = F)
setwd("~/Side_project")
university_bands <- read.csv('University_bands.csv', stringsAsFactors = F)
View(university_bands)
